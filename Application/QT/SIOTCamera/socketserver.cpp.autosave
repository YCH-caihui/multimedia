#include "socketserver.h"

static int m_ListenSocket = -1;
static int m_BindSocket = -1;

//非阻塞套接字收
int tcp_receive(int socket, char * pBuffer, unsigned int nSize)
{
     int ret = 0;
}

int set_socket_params(int sockfd)
{
    fcntl(sockfd, F_SETFL, 0, O_NONBLOCK);
//    struct timeval tmval;
//    tmval.tv_sec = 5;
//    tmval.tv_usec = 0;
//    int size = 5;
    
//    setsockopt(sockfd, SOL_SOCKET, SO_SNDBUF,  &size, sizeof (size));
    
    return 0;
}

int client_socketProcess(struct sockaddr_in * ipaddr)
{
    fd_set read_set; 
    int wait_count = 0;
    
    set_socket_params(m_BindSocket);
    
    struct timeval tmval;
    tmval.tv_sec = 20;
    tmval.tv_usec = 0;
    
    FD_ZERO(&read_set);
    FD_SET(m_BindSocket, &read_set);
    
    while (1) 
    {
        int ret = select(m_BindSocket + 1, &read_set, nullptr, nullptr, &tmval);
        switch (wait_count < 10) 
        {
           case -1:
            break;
           case 0:  
            wait_count++;
            break;
        default:
            if(FD_ISSET(m_BindSocket, &read_set)) 
            {
                //recv.....
            }
        }
    }
    
}

void accept_process()
{
    struct sockaddr_in cline_socket;
    socklen_t size;
    while(1)
    {
        size = sizeof(struct sockaddr_in);
        m_BindSocket = accept(m_ListenSocket, reinterpret_cast<struct sockaddr *>(&cline_socket), &size);
        if(m_BindSocket > 0)
        {
            printf("连接成功%d \n", m_BindSocket);
            //继续处理....数据收发.... recv  send ......

        }

        close(m_BindSocket); //父进程关闭

        usleep(2000 * 1000);
    }
}

void start_tcp_server()
{
    m_ListenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
    if(m_ListenSocket < 0) //返回值小于0 则失败
    {
        close(m_ListenSocket);
        m_ListenSocket = -1;
    }

    struct sockaddr_in  server_addr;
    bzero(&server_addr, sizeof(struct sockaddr_in)); //初始化sockaddr_in
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(LISTEN_PORT); //主机字节序转换为网络字节序
    server_addr.sin_addr.s_addr = INADDR_ANY;

    //绑定
    int nRet = bind(m_ListenSocket, reinterpret_cast<const struct sockaddr *>(&server_addr), sizeof (struct sockaddr_in));
    if(nRet < 0)
    {
        close(m_ListenSocket);
        m_ListenSocket = -1;
    }

    //监听
    nRet = listen(m_ListenSocket, 10);
    if(nRet < 0)
    {
        close(m_ListenSocket);
        m_ListenSocket = -1;
    }

    accept_process();


}
